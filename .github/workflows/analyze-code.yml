name: Update Lines of Code in Readme

on:
  schedule:
    - cron: "0 0 * * 0" # Weekly on Sunday at midnight UTC
  workflow_dispatch:

jobs:
  count-lines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq cloc locales
          sudo locale-gen en_US.UTF-8

      - name: Fetch and Clone Repositories
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          USERNAME="pmazumder3927"
          get_repos() {
            local visibility=$1
            page=1
            while :; do
              result=$(curl -H "Authorization: token $GH_PAT" -s "https://api.github.com/user/repos?visibility=$visibility&per_page=100&page=$page")
              names=$(echo "$result" | jq -r '.[] | select(.fork == false) | .full_name')
              [ -z "$names" ] && break
              echo "$names"
              ((page++))
            done
          }

          mkdir -p repos/public repos/private output

          cd repos/private
          for REPO in $(get_repos private); do
            REPO_URL="https://github.com/$REPO.git"
            AUTHENTICATED_REPO=$(echo "$REPO_URL" | sed "s|https://|https://$GH_PAT@|g")
            DEFAULT_BRANCH=$(curl -H "Authorization: token $GH_PAT" -s "https://api.github.com/repos/$REPO" | jq -r '.default_branch')
            git clone --branch "$DEFAULT_BRANCH" --single-branch "$AUTHENTICATED_REPO" "$(basename $REPO)-$DEFAULT_BRANCH" || echo "Failed to clone $REPO."
          done
          cd ../../

          cd repos/public
          for REPO in $(get_repos public); do
            REPO_URL="https://github.com/$REPO.git"
            AUTHENTICATED_REPO=$(echo "$REPO_URL" | sed "s|https://|https://$GH_PAT@|g")
            DEFAULT_BRANCH=$(curl -H "Authorization: token $GH_PAT" -s "https://api.github.com/repos/$REPO" | jq -r '.default_branch')
            git clone --branch "$DEFAULT_BRANCH" --single-branch "$AUTHENTICATED_REPO" "$(basename $REPO)-$DEFAULT_BRANCH" || echo "Failed to clone $REPO."
          done
          cd ../../

          cloc repos/private \
            --exclude-ext=json,html,css,svg,md,ps1,scss,csv,prefab,unity,asset,meta \
            --exclude-dir=Library,Temp,obj,Build,build,.git \
            --json > output/cloc-private.json

          cloc repos/public \
            --exclude-ext=json,html,css,svg,md,ps1,scss,csv,prefab,unity,asset,meta \
            --exclude-dir=Library,Temp,obj,Build,build,.git \
            --json > output/cloc-public.json

      - name: Commit and Push Output
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          PUB_TOTAL=$(jq '.SUM.code // 0' output/cloc-public.json)
          PRI_TOTAL=$(jq '.SUM.code // 0' output/cloc-private.json)
          TOTAL_LINES=$((PUB_TOTAL + PRI_TOTAL))

          format_number() {
            export LC_ALL="en_US.UTF-8"
            printf "%'d\n" "$1"
          }

          draw_bar() {
            local count=$1 max=$2
            local full=20
            local ratio=$(awk "BEGIN { printf \"%.4f\", $count/$max }")
            local filled=$(awk -v f=$full -v r=$ratio 'BEGIN { printf "%d", f * r }')
            local empty=$((full - filled))
            local bar=""
            for ((i = 0; i < filled; i++)); do bar+="█"; done
            for ((i = 0; i < empty; i++)); do bar+="·"; done
            echo "$bar"
          }

          declare -A EMOJIS=( ["Java"]="☕" ["Python"]="🐍" ["JavaScript"]="💛" \
                              ["TypeScript"]="🌀" ["JSX"]="🎨" ["PHP"]="🐘" ["C#"]="🔧" ["Dart"]="🎯" )

          echo "<pre><code style=\"font-family: monospace; font-size: 14px;\">" > temp_block.txt
          echo "📊 total lines of code: $(format_number $TOTAL_LINES)" >> temp_block.txt
          echo "🔓 public: $(format_number $PUB_TOTAL)   🔒 private: $(format_number $PRI_TOTAL)" >> temp_block.txt
          echo "" >> temp_block.txt

          for LANG in "${!EMOJIS[@]}"; do
            if [[ "$LANG" == "Python" ]]; then
              PUB=$(jq '."Python".code // 0 + ."Jupyter Notebook".code // 0' output/cloc-public.json)
              PRI=$(jq '."Python".code // 0 + ."Jupyter Notebook".code // 0' output/cloc-private.json)
            else
              PUB=$(jq --arg LANG "$LANG" '.[$LANG].code // 0' output/cloc-public.json)
              PRI=$(jq --arg LANG "$LANG" '.[$LANG].code // 0' output/cloc-private.json)
            fi
            TOTAL=$((PUB + PRI))
            [[ $TOTAL -eq 0 ]] && continue
            BAR=$(draw_bar $TOTAL $TOTAL_LINES)
            LANG_LOWER=$(echo "$LANG" | tr '[:upper:]' '[:lower:]')
            EMOJI="${EMOJIS[$LANG]}"
            PADDED_LANG=$(printf '%-13s' "$LANG_LOWER")
            PADDED_BAR=$(printf '%-20s' "$BAR")
            PADDED_TOTAL=$(format_number $TOTAL)
            echo "$EMOJI $PADDED_LANG $PADDED_BAR $PADDED_TOTAL" >> temp_block.txt
          done

          echo "</code></pre>" >> temp_block.txt

          sed -i '/<!-- LANGUAGES BREAKDOWN START -->/,/<!-- LANGUAGES BREAKDOWN END -->/{
              //!d
              /<!-- LANGUAGES BREAKDOWN START -->/r temp_block.txt
          }' README.md

          rm temp_block.txt

          git add output/cloc-*.json README.md
          git commit -m "chore: update README with latest code stats" || echo "No changes to commit"
          git push origin HEAD
